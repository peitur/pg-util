#!/usr/bin/ruby

#!/usr/bin/ruby


current_dir = File.dirname( __FILE__ )
lib_dir = current_dir+"/../lib"
$LOAD_PATH.unshift( lib_dir )
#puts "DEBUG #{__LINE__}: Load path is "+$LOAD_PATH.to_s() 

require 'getoptlong'

require 'pgact/activity'
require 'pgact/settings'

require 'pgact/output_activity'
require 'pgact/output_settings'

require 'database/pg'


#####################################################################################################
########## FUNCTIONS
#####################################################################################################


def pg_status( )

	opts = GetoptLong.new(
	  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
	  [ '--debug', '-d', GetoptLong::NO_ARGUMENT ],
	  [ '--host', '-H', GetoptLong::OPTIONAL_ARGUMENT ],
	  [ '--dbname', '-D', GetoptLong::OPTIONAL_ARGUMENT ],
	  [ '--user', '-U', GetoptLong::OPTIONAL_ARGUMENT ],
	  [ '--password', '-P', GetoptLong::OPTIONAL_ARGUMENT ],
	  [ '--oformat', '-o', GetoptLong::OPTIONAL_ARGUMENT ],
	  [ '--file', '-F', GetoptLong::OPTIONAL_ARGUMENT ],
	  [ '--state', '-s', GetoptLong::OPTIONAL_ARGUMENT ],
  	  [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ]
	)

	config = Hash.new()
	authfile = nil
	debug = false
	state = nil
	verbose = nil

	opts.each do |opt, arg|
		case opt 
			when "--debug"
				debug = true
			when "--help"
				print_status_help()
				exit()
			when "--host"
				config['host'] = arg
			when "--dbname"
				config['dbname'] = arg
			when "--user"
				config['user'] = arg
			when "--password"
				config['password'] = arg
			when "--file"
				authfile = arg
			when "--state"
				state = arg
			when "--verbose"
				verbose = true
			else
				abort("ERROR #{__FILE__}/#{__LINE__}: Status Option #{opt} is not supported"+"\n")
		end
	end

	config = load_json( authfile, debug ) if( authfile )
	config["debug"] = debug

	STDERR.puts("DEBUG #{__FILE__}:#{__LINE__} Search Activity \n") if @debug

	begin
		act = Activity.new( config )
		out = ActivityOutput.new( )

#		raise RuntimeError, "ERROR #{__FILE__}/#{__LINE__}: Activity is not supported"+"\n" if not act.supported_field?( what )


		data = act.get_activity( state )

		puts("Found #{data.length()} elements")
#		fields = out.short_fields()
#		out.print_head( fields )
		data.each{ |line|
			puts("\n>> "+line.to_s+"\n" )
#			out.print_line( fields, line ) 
		}

	rescue => error
		STDERR.puts( "ERROR #{__FILE__}:#{__LINE__}  : "+error.to_s+"\n" )
		STDERR.puts( "ERROR #{__FILE__}:#{__LINE__}  : "+error.backtrace.join("\n")+"\n" )
	end


end




def pg_settings( )

	opts = GetoptLong.new(
	  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
	  [ '--debug', '-d', GetoptLong::NO_ARGUMENT ],
	  [ '--host', '-H', GetoptLong::OPTIONAL_ARGUMENT ],
	  [ '--dbname', '-D', GetoptLong::OPTIONAL_ARGUMENT ],
	  [ '--user', '-U', GetoptLong::OPTIONAL_ARGUMENT ],
	  [ '--password', '-P', GetoptLong::OPTIONAL_ARGUMENT ],
	  [ '--file', '-F', GetoptLong::OPTIONAL_ARGUMENT ],
	  [ '--what', '-w', GetoptLong::OPTIONAL_ARGUMENT ],
	  [ '--pattern', '-p', GetoptLong::OPTIONAL_ARGUMENT ],
	  [ '--oformat', '-o', GetoptLong::OPTIONAL_ARGUMENT ],
  	  [ '--modified', '-m', GetoptLong::NO_ARGUMENT ],
  	  

	)

	config = Hash.new()
	authfile = nil
	debug = false
	what = "name"
	pattern = nil 
	modified = nil
	output_format = "text"

	opts.each do |opt, arg|
		case opt 
			when "--debug"
				debug = true
			when "--help"
				print_status_help()
				exit()
			when "--host"
				config['host'] = arg
			when "--dbname"
				config['dbname'] = arg
			when "--user"
				config['user'] = arg
			when "--password"
				config['password'] = arg
			when "--file"
				authfile = arg
			when "--pattern"
				pattern = arg
			when "--oformat"
				output_format = arg				
			when "--what"
				what = arg
			when "--modified"
				modified = true
			else
				abort("ERROR #{__FILE__}/#{__LINE__}: Settings Option #{opt} is not supported"+"\n")			
		end
	end

	config = load_json( authfile, debug ) if( authfile )
	config["debug"] = debug

	STDERR.puts("DEBUG #{__FILE__}:#{__LINE__} Search Filters : What:'#{what}' Pattern:#{pattern}  \n") if @debug
 
	begin
		sti = Settings.new( config )
		out = SettingsOutput.new( "stdout", output_format, debug )

		raise RuntimeError, "ERROR #{__FILE__}/#{__LINE__}: Settings search field '#{what}' is not supported"+"\n" if not sti.supported_field?( what )

		if( modified )
			data = sti.search_modified()
		elsif( pattern )
			data = sti.search_rx( what, pattern )
		else
			data = sti.search_all()
#			raise RuntimeError, "ERROR #{__FILE__}/#{__LINE__}: Missing matching parameter, exact or regx"+"\n"
		end

		puts("Found #{data.length()} elements") if( debug )
		fields = out.short_fields()
		out.print_head( fields )
		data.each{ |line|
#			puts("\n>> "+line.to_s+"\n" )
			out.print_line( fields, line ) 
		}

	rescue => error
		STDERR.puts( "ERROR #{__FILE__}:#{__LINE__}  : "+error.to_s+"\n" )
		STDERR.puts( "ERROR #{__FILE__}:#{__LINE__}  : "+error.backtrace.join("\n")+"\n" )
	end


end


## loading login data from a json config file, to simplify test content	
def load_json( filename, debug = false)
	raise RuntimeError, "Missing filename" if not filename

	if( File.exists?( filename ) or File.symlink?( filename ) )		
		return JSON.load( File.open( filename ) )
	else
		raise RuntimeError, "Could not find "+filename+"\n"
	end

end	


#####################################################################################################
########## CONSTANTS
#####################################################################################################
DEBUG = false

action = ARGV[0] ? ARGV.shift() : "status"

#puts("Status #{action}" )

begin
	case action
		when "status"
			pg_status( )
		when "settings"
			pg_settings( )
		else
			abort("ERROR: Unsupported action #{action} \n" )
	end
rescue => error
	STDERR.puts( "ERROR #{__FILE__}:#{__LINE__}  : "+error.to_s+"\n" )
	STDERR.puts( "ERROR #{__FILE__}:#{__LINE__} MAIN : "+error.backtrace.join("\n")+"\n" )
end
